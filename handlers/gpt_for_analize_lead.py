from aiogram import Router, F, types
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from database.models import User, todo, Food
from misc.scheduler_update_date import update_time
from keyboards.back import back_kb
from keyboards.gpt import gpt_kb

import requests
import json
from dotenv import load_dotenv
import os

load_dotenv()

router = Router()

class Form(StatesGroup):
    gpt_question = State()

API_KEY = os.getenv('API_KEY_GPT')
MODEL = 'deepseek/deepseek-r1'

def proces_content(content):
    return content.replace('<think>', '').replace('</think>', '')

async def analize_chat_stream(user_question, message: types.Message):
    headers = {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json'
    }
    data = await User.filter(telegram_id=message.from_user.id)
    values = {
        '1-1': data[0].first_answer,
        '1-2': data[0].second_answer,
        '1-3': data[0].third_answer,
        '1-4': data[0].fourth_answer,
        '2-1': data[0].fifth_answer,
        '2-2': data[0].sixth_answer,
        '2-3': data[0].seventh_answer,
    }
    data_food = await Food.filter(telegram_id = message, date = update_time())
    data_todo = await todo.filter(telegram_id = message.from_user.id, date = update_time())
    prompt = '''–¢—ã ‚Äî ¬´–í–∏—Ç–∞–ª–∏–π¬ª, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ç—Ä–µ–Ω–µ—Ä...

...–≤—Å—ë –≤–∞—à –ø—Ä–æ–º—Ç...

–ñ–ï–õ–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{QUESTION}

‚ùóÔ∏è**–í–ê–ñ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø**: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ô –í–°–ï –í–´–®–ï–ü–ï–†–ï–ß–ò–°–õ–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
–ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã, –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.

1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
2. –ó–∞—Ç–µ–º —É—á—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏  
3. –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –≤–µ—Å—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç

–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:
1: {
        1: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
        2: "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
        3: "–£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
        4: "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º"
    },
    2: {
        1: "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∂–µ–ª–µ–∑–æ–º",
        2: "–ö–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        3: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥",
        4: "–ô–æ–≥–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞"
    },
    3: {
        1: "–£–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã",
        2: "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞",
        3: "–°–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è",
        4: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º"
    },
    4: {
        1: "1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é",
        2: "3-4 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é",
        3: "5-6 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é",
        4: "–ë–æ–ª–µ–µ 6 —á–∞—Å–æ–≤"
    },
    5: {
        1: "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        2: "–° –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º",
        3: "–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è"
    },
    6: {
        1: "–û—á–µ–Ω—å –≤–∞–∂–Ω–æ",
        2: "–°–∫–æ—Ä–µ–µ –≤–∞–∂–Ω–æ",
        3: "–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    },
    7: {
        1: "–î–æ 18 –ª–µ—Ç",
        2: "18-25 –ª–µ—Ç",
        3: "26-35 –ª–µ—Ç",
        4: "36-45 –ª–µ—Ç",
        5: "–°—Ç–∞—Ä—à–µ 45 –ª–µ—Ç"
    }

–ï–≥–æ –æ—Ç–≤–µ—Ç—ã:
–î–ê–ù–ù–´–ï –ò–ó –ê–ù–ö–ï–¢–´ –ö–õ–ò–ï–ù–¢–ê:
{data}

–°–ï–ì–û–î–ù–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–™–ï–õ:
{FOOD}

–°–ï–ì–û–î–ù–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–î–ï–õ–ê–õ:
{TODO}

–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–∏—Ñ—Ä–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ —É—Ä–æ–≤–Ω–∏/–±–∞–ª–ª—ã (1-–Ω–∏–∑–∫–∏–π, 3-—Å—Ä–µ–¥–Ω–∏–π, 5-–≤—ã—Å–æ–∫–∏–π)
2. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –¥–∞–Ω–Ω—ã–µ
3. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –ø–æ–¥–∫—Ä–µ–ø–ª—è—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
4. –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ "–∑–æ–Ω–∞–º —Ä–æ—Å—Ç–∞", –ø—Ä–µ–¥–ª–∞–≥–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
5. –ü–æ–∫–∞–∑—ã–≤–∞–π –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–∏—Ç–∞–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:

üèãÔ∏è –ê–ù–ê–õ–ò–ó –¢–í–û–ï–ì–û –ü–û–¢–ï–ù–¶–ò–ê–õ–ê

‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: [–≤—ã—è–≤–∏ –ø–ª—é—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤]
‚ö†Ô∏è –ó–æ–Ω—ã —Ä–æ—Å—Ç–∞: [–æ–ø—Ä–µ–¥–µ–ª–∏ –º–∏–Ω—É—Å—ã –∏ —Ä–∏—Å–∫–∏]

üìä –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–õ–ê–ù

üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç—ã: [–Ω–∞ —á—Ç–æ –¥–µ–ª–∞—Ç—å —É–ø–æ—Ä]
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: [—É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏]

ü•ó –ü–ò–¢–ê–ù–ò–ï –ò –†–ï–ñ–ò–ú:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é]
‚Ä¢ –†–µ–∂–∏–º –¥–Ω—è: [—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]
‚Ä¢ –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ–¥–µ]

üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï:
‚Ä¢ –°–æ–Ω: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: [–∫–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å]

üéØ –ö–õ–Æ–ß–ï–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ù–ê –°–¢–ê–†–¢–ï:
‚Ä¢ [3-4 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞]

–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø–ª–∞–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! üí™

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã, –¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ü–∏—Ñ—Ä–∞—Ö –∏–∑ –∞–Ω–∫–µ—Ç—ã.'''

    data_str = ""
    for key, value in values.items():
        question_number, answer_number = key.split('-')
        data_str += f'–†–∞–∑–¥–µ–ª {question_number}, –≤–æ–ø—Ä–æ—Å {answer_number}: {value}\n'
    food_list = [food.name for food in data_food] if data_food else ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏"]
    todo_list = [task.todo_task for task in data_todo] if data_todo else ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"]

    formatted_prompt = prompt.format(
        data=data_str,
        FOOD=", ".join(food_list),
        TODO=", ".join(todo_list),
        QUESTION = user_question
    )
    data = {
        'model': MODEL,
        'messages': [{'role': 'user', 'content': formatted_prompt}],
        'stream': True
    }

    bot_message = await message.answer("üîç –ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...")
    full_response = []

    try:
        with requests.post(
            'https://openrouter.ai/api/v1/chat/completions',
            headers=headers,
            json=data,
            stream=True
        ) as response:
            if response.status_code != 200:
                await bot_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
                return
            
            for chunk in response.iter_lines():
                if chunk:
                    chunk_str = chunk.decode('utf-8').replace('data:', '')
                    try:
                        chunk_json = json.loads(chunk_str)
                        if 'choices' in chunk_json:
                            content = chunk_json['choices'][0]['delta'].get('content', '')
                            if content:
                                cleaned = proces_content(content)
                                full_response.append(cleaned)
                                if len(full_response) % 5 == 0: 
                                    await bot_message.edit_text(
                                        f"ü§ñ –û—Ç–≤–µ—Ç:\n\n{''.join(full_response)}",
                                        parse_mode=ParseMode.MARKDOWN
                                    )
                    except:
                        pass
            
            if full_response:
                await bot_message.edit_text(
                    f"ü§ñ –û—Ç–≤–µ—Ç:\n\n{''.join(full_response)}",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=gpt_kb()
                )
            else:
                await bot_message.edit_text("‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")
                
    except Exception as e:
        await bot_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == 'deepseek_analize')
async def question_answer1(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', reply_markup=back_kb())
    await state.set_state(Form.gpt_question)
    await callback.answer()
@router.message(StateFilter(Form.gpt_question))
async def handle_user_question1(message: types.Message, state: FSMContext):
    if message.text:
        await analize_chat_stream(message.text, message)
        await state.clear()
import logging
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy import URL, create_engine, select, BigInteger
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Session
from sqlalchemy.exc import IntegrityError  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

from hui import settings
from config import TOKEN_API_BOT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN_API_BOT)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(url=settings.DATABASE_URL_PSYCOPG, echo=True)

class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "users"
    
    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(BigInteger, unique=True)
    name: Mapped[str]
    age: Mapped[int]

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ —É–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É 
Base.metadata.drop_all(engine)
Base.metadata.create_all(engine)

# –°—Ç–µ–π—Ç—ã (—Å–æ—Å—Ç–æ—è–Ω–∏—è) –¥–ª—è FSM
class Form(StatesGroup):
    name = State()
    age = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Form.age)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with Session(engine) as session:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                user_id=message.from_user.id,
                name=data['name'],
                age=age
            )
            session.add(user)
            session.commit()
            await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except IntegrityError:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            session.rollback()
            existing_user = session.execute(
                select(User).where(User.user_id == message.from_user.id)
            ).scalar_one()
            
            existing_user.name = data['name']
            existing_user.age = age
            session.commit()
            await message.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_all_data(message)
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
async def send_all_data(message: Message):
    with Session(engine) as session:
        users = session.execute(select(User)).scalars().all()
        
        if not users:
            await message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        response = "üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:\n\n"
        for user in users:
            response += (
                f"üë§ ID: {user.user_id}\n"
                f"üìõ –ò–º—è: {user.name}\n"
                f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        max_length = 4000
        if len(response) > max_length:
            for i in range(0, len(response), max_length):
                await message.answer(response[i:i+max_length])
        else:
            await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /data
@dp.message(Command("data"))
async def cmd_data(message: Message):
    await send_all_data(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())